# Настройки источника данных:
# Здесь указывается класс драйвера для подключения к базе данных. Этот драйвер необходим для установления соединения с базой данных.
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Эта строка задает URL для подключения к базе данных. В данном случае подключение происходит к базе данных MySql, расположенной на локальном хосте (localhost) на порту 3306, и к базе данных с именем 'PP_3_1_3_spring-boot-security'. Параметр currentSchema='PP_3_1_3_spring-boot-security' указывает, что будет использоваться схема 'PP_3_1_3_spring-boot-security'
spring.datasource.url=jdbc:mysql://localhost:3306/PP_3_1_4_spring-bootstrap?currentSchema=PP_3_1_4_spring-bootstrap
#spring.datasource.url=jdbc:mysql://localhost:3306/PP_3_1_4_spring-bootstrap

spring.application.name=PP_3_1_4_spring-bootstrap
spring.datasource.username=user
spring.datasource.password=1234

# Указывает, следует ли Hibernate генерировать схемы таблиц на основе сущностей. 'false' -> схемы таблиц не будут автоматически создаваться или обновляться.
spring.jpa.generate-ddl=false

# Устанавливает стратегию генерации схемы базы данных.
# 'none': ничего не делать
# 'validate': проверяет, соответствуют ли схемы таблиц сущностям
# 'update': обновляет схемы таблиц в соответствии с сущностями
# 'create': создаёт схемы таблиц при каждом запуске приложения
# 'create-drop': создаёт схемы таблиц при запуске и удаляет их при завершении работы приложения
spring.jpa.hibernate.ddl-auto=update


spring.mvc.view.prefix=/templates/
spring.mvc.view.suffix=.html
#spring.mvc.view.redirect=true
#spring.mvc.view.redirect-url=greeting-page
#spring.mvc.view.redirect-url=http://localhost:8080/


# Настройки сервера:
# порт, на котором ваш Spring Boot сервер будет слушать входящие запросы.
# стандартный порт для 'postgres'=8189, 'mysql'=8080/ В моем случае можно не указывать.
#server.port=8080

# задает контекстный путь для вашего приложения. Это значит, что приложение будет доступно по адресу http://localhost:8080/security.
#server.servlet.context-path=/security



# Настройки JPA и Hibernate
# Эта строка включает логирование SQL-запросов, которые Hibernate генерирует и выполняет. Это полезно для отладки и анализа запросов.
spring.jpa.show-sql=true

# Здесь задается диалект базы данных, который будет использовать Hibernate. В данном случае используется диалект PostgreSQL 9.5. Hibernate использует этот диалект для генерации правильных SQL-запросов, специфичных для данной базы данных.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect

# Эта строка отключает использование метаданных JDBC по умолчанию. В некоторых случаях это может улучшить производительность, особенно если вы используете специальные настройки или оптимизации в вашей базе данных.
#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false


# Блок настроек для MVC.
# Устанавливает префикс для путей к JSP представлениям. Все представления будут искаться в папке /WEB-INF/pages/.
# spring.mvc.view.prefix = /WEB-INF/pages/

# Устанавливает суффикс для файлов html представлений. Представления будут иметь расширение .html.
#spring.mvc.view.suffix = .html


#Включаем режим дебага, выводит все в консоль
#logging.level.org.springframework=debug
#logging.level.org.hibernate=debug


